// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ListItem {
  id          String  @id @default(uuid())
  title       String  @db.VarChar(46)
  description String? @db.VarChar(500)
  checked     Boolean @default(false)
  listId      String
  list        List    @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

model List {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(100)
  description String?    @db.VarChar(500)
  public      Boolean    @default(false)
  items       ListItem[]
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}
