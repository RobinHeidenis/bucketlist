// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]
  collaborator  List[]    @relation("ListCollaborators")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id        Int        @id
  name      String
  overview  String?
  posterUrl String?
  movies    Movie[]
  listItems ListItem[]
}

model ListItem {
  id           String      @id @default(uuid())
  title        String?     @db.VarChar(46)
  description  String?     @db.VarChar(500)
  checked      Boolean     @default(false)
  movieId      Int?
  movie        Movie?      @relation(fields: [movieId], references: [id], onDelete: Cascade)
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  listId       String
  list         List        @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
  @@index([movieId])
  @@index([collectionId])
}

enum ListType {
  MOVIE
  BUCKET
}

model List {
  id            String       @id @default(uuid())
  title         String       @db.VarChar(100)
  description   String?      @db.VarChar(500)
  isPublic      Boolean      @default(false)
  items         ListItem[]
  type          ListType     @default(BUCKET)
  ownerId       String
  owner         User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators User[]       @relation("ListCollaborators")
  InviteLink    InviteLink[]

  @@index([ownerId])
}

model Movie {
  id          Int          @id
  title       String       @db.VarChar(200)
  description String?      @db.VarChar(1000)
  releaseDate String?      @db.VarChar(50)
  rating      String?      @db.VarChar(10)
  runtime     Int?         @db.SmallInt
  genres      String?      @db.VarChar(200)
  posterUrl   String?      @db.VarChar(200)
  updatedAt   DateTime     @default(now())
  listItems   ListItem[]
  collections Collection[]
}

model InviteLink {
  id        String   @id @default(uuid())
  code      String   @unique @db.VarChar(5)
  listId    String
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@index([listId])
  @@index([code])
}
