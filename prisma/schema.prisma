// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String           @id @default(cuid())
  lists          List[]
  collaborator   List[]           @relation("ListCollaborators")
  watchedMovie   WatchedMovie[]
  watchedEpisode WatchedEpisode[]
}

model Movie {
  id          Int            @id
  title       String         @db.VarChar(200)
  description String?        @db.VarChar(1000)
  releaseDate String         @db.VarChar(50)
  rating      String?        @db.VarChar(10)
  runtime     Int?           @db.SmallInt
  genres      String?        @db.VarChar(200)
  posterUrl   String?        @db.VarChar(200)
  imageHash   Bytes?         @db.Binary(30)
  updatedAt   DateTime       @default(now())
  etag        String?        @db.VarChar(100)
  lists       List[]
  checkedBy   CheckedMovie[]
  collections Collection[]
  watchedBy   WatchedMovie[]
}

model CheckedMovie {
  id      String @id @default(uuid())
  listId  String
  list    List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  movieId Int
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@unique([movieId, listId])
  @@index([listId])
  @@index([movieId])
  @@index([listId, movieId])
}

model WatchedMovie {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId   Int
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  watchedAt DateTime? @db.Date

  @@index([userId, movieId])
  @@index([movieId])
  @@index([userId])
}

model Collection {
  id        Int      @id
  name      String   @db.VarChar(300)
  overview  String?  @db.VarChar(1000)
  posterUrl String?
  imageHash Bytes?   @db.Binary(30)
  updatedAt DateTime @default(now()) @updatedAt
  etag      String?  @db.VarChar(100)
  movies    Movie[]
  lists     List[]
}

model Show {
  id          Int      @id
  title       String   @db.VarChar(200)
  description String?  @db.VarChar(1000)
  releaseDate String   @db.VarChar(50)
  rating      String?  @db.VarChar(10)
  genres      String?  @db.VarChar(200)
  posterUrl   String?  @db.VarChar(200)
  imageHash   Bytes?   @db.Binary(30)
  updatedAt   DateTime @default(now())
  etag        String?  @db.VarChar(100)
  seasons     Season[]
  lists       List[]
}

model Season {
  id           Int       @id
  showId       Int
  show         Show      @relation(fields: [showId], references: [id], onDelete: Cascade)
  seasonNumber Int       @db.SmallInt
  title        String    @db.VarChar(200)
  overview     String?   @db.VarChar(1000)
  posterUrl    String?   @db.VarChar(200)
  releaseDate  String    @db.VarChar(50)
  updatedAt    DateTime  @default(now())
  episodes     Episode[]

  @@unique([showId, seasonNumber])
  @@index([showId])
  @@index([showId, seasonNumber])
}

model Episode {
  id            Int              @id
  seasonId      Int
  season        Season           @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  episodeNumber Int              @db.SmallInt
  title         String           @db.VarChar(200)
  overview      String?          @db.VarChar(1000)
  releaseDate   String           @db.VarChar(50)
  updatedAt     DateTime         @default(now())
  checkedBy     CheckedEpisode[]
  watchedBy     WatchedEpisode[]

  @@index([seasonId])
}

model CheckedEpisode {
  id        String  @id @default(uuid())
  listId    String
  list      List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  episodeId Int
  episode   Episode @relation(fields: [episodeId], references: [id])

  @@unique([episodeId, listId])
  @@index([listId])
  @@index([episodeId])
  @@index([listId, episodeId])
}

model WatchedEpisode {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodeId Int
  episode   Episode   @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  watchedAt DateTime? @db.Date

  @@index([userId, episodeId])
  @@index([episodeId])
  @@index([userId])
}

model BucketListItem {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(46)
  description String?  @db.VarChar(500)
  checked     Boolean  @default(false)
  updatedAt   DateTime @default(now()) @updatedAt
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

enum ListType {
  MOVIE
  SHOW
  BUCKET
}

model List {
  id              String           @id @default(uuid())
  title           String           @db.VarChar(100)
  description     String?          @db.VarChar(500)
  isPublic        Boolean          @default(false)
  type            ListType         @default(BUCKET)
  updatedAt       DateTime         @default(now()) @updatedAt
  bucketListItems BucketListItem[]
  movies          Movie[]
  collections     Collection[]
  shows           Show[]
  checkedMovies   CheckedMovie[]
  checkedEpisodes CheckedEpisode[]
  collaborators   User[]           @relation("ListCollaborators")
  InviteLink      InviteLink[]
  ownerId         String
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model InviteLink {
  id        String   @id @default(uuid())
  code      String   @unique @db.VarChar(5)
  listId    String
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@index([listId])
  @@index([code])
}
